import type { IOrderedEntityCollection, IPropEventBroker } from '../src/interfaces';
import { Entity } from '../src/entities';
import { vi, describe, it, expect } from 'vitest';
import { aRandomInteger, aRandomString } from '@zdr-tools/zdr-native-tools';

class EmptyEntity extends Entity {
  getEntityName(): string {
    return 'EmptyEntity';
  }
}
class SubEntity extends Entity {
  value: IPropEventBroker<string>;

  constructor(id: string | undefined, value: string) {
    super(id);

    this.value = this.createPropEventBroker<string>('value', value);
  }

  getEntityName(): string {
    return 'SubEntity';
  }
}

class ComplexEntity extends Entity {
  name: IPropEventBroker<string>;
  age: IPropEventBroker<number>;
  collection: IOrderedEntityCollection<ComplexEntity>;
  subEntity: SubEntity;
  constructor(id: string | undefined, name: string, age: number, collection: ComplexEntity[]) {
    super(id);

    this.name = this.createPropEventBroker<string>('name', name);
    this.age = this.createPropEventBroker<number>('age', age);
    this.collection = this.createOrderedEntityCollection<ComplexEntity>(`${id}-collection`, collection);

    this.subEntity = new SubEntity(undefined, 'subEntity');

    this.addSubEntity(this.subEntity);
  }

  getEntityName(): string {
    return 'ComplexEntity';
  }
}

describe('Entity', () => {
  describe('entity id', () => {
    it('should have an auto-generated ID', () => {
      const entity = new EmptyEntity(undefined);
      const id = entity.getId();

      expect(typeof id).toBe('string');
    });

    it('should set an  ID', () => {
      const randomId = aRandomString();
      const newEntity = new EmptyEntity(randomId);
      const id = newEntity.getId();

      expect(id).toEqual(randomId);
    });

    it('should set id', () => {
      const randomId = aRandomString();
      const newEntity = new EmptyEntity(undefined);

      newEntity.setId(randomId);
      const id = newEntity.getId();

      expect(id).toEqual(randomId);
    });

    it('should still compare to auto generated id', () => {
      const randomId = aRandomString();
      const newEntity = new EmptyEntity(undefined);
      const autoGeneratedId = newEntity.getId();
      newEntity.setId(randomId);
      const id = newEntity.getId();

      expect(id).toEqual(randomId);
      expect(newEntity.checkId(autoGeneratedId)).toEqual(true);
    });

    it('should raise idChanged event', () => {
      const randomId = aRandomString();
      const newEntity = new EmptyEntity(undefined);
      const oldId = newEntity.getId();
      const idChanged = vi.fn();
      newEntity.idChanged.register(idChanged);

      newEntity.setId(randomId);

      expect(idChanged).toBeCalledWith({
        oldId,
        newId: randomId
      });
    });

    it('should correctly indicate if it is new', () => {
      const newEntity = new EmptyEntity(undefined);
      expect(newEntity.isNew()).toBe(true);
    });

    it('should correctly indicate if it is not new', () => {
      const newEntity = new EmptyEntity(aRandomString());

      expect(newEntity.isNew()).toBe(false);
    });
  });

  describe('Track Changes', () => {
    it('should track changes', () => {
      const newEntity = new ComplexEntity(undefined, aRandomString(), aRandomInteger(), []);
      expect(newEntity.isChanged()).toBe(false);
    });

    it('should indicate changes', () => {
      const newEntity = new ComplexEntity(undefined, aRandomString(), aRandomInteger(), []);
      newEntity.age.set(aRandomInteger());
      expect(newEntity.isChanged()).toBe(true);
    });

    it('should indicate changes in hierarchic changes', () => {
      const newEntityLevel3 = new ComplexEntity('level3', aRandomString(), aRandomInteger(), []);
      const newEntityLevel3Another = new ComplexEntity('level3Another', aRandomString(), aRandomInteger(), []);
      const newEntityLevel2 = new ComplexEntity('level2', aRandomString(), aRandomInteger(), [newEntityLevel3, newEntityLevel3Another]);
      const newEntityLevel1 = new ComplexEntity('level1', aRandomString(), aRandomInteger(), [newEntityLevel2]);
      const level1Age = aRandomInteger();
      const level2SubEntity = aRandomString();
      const level3Age = aRandomInteger();

      newEntityLevel1.age.set(level1Age);
      newEntityLevel2.collection.moveItem('level3Another', 0);
      newEntityLevel3.age.set(level3Age);
      newEntityLevel3.name.set(level2SubEntity);
      newEntityLevel3Another.name.set(level2SubEntity);
      expect(newEntityLevel1.isChanged()).toBe(true);
      expect(newEntityLevel2.isChanged()).toBe(true);
      expect(newEntityLevel3.isChanged()).toBe(true);

      expect(newEntityLevel1.getChangedProps()).toEqual([
        {
          changedProps: [{ propName: 'age', value: level1Age.toString() }],
          entityId: 'level1',
          entityName: 'ComplexEntity'
        },
        {
          changedProps: [{ propName: 'order', value: 'order' }],
          entityId: 'level2-collection',
          entityName: 'level2-collection',
          order: 0,
          parentEntityId: 'level2'
        },
        {
          changedProps: [{ propName: 'name', value: level2SubEntity }],
          entityId: 'level3Another',
          entityName: 'ComplexEntity',
          order: 0,
          parentEntityId: 'level2'
        },
        {
          changedProps: [{ propName: 'name', value: level2SubEntity }, { propName: 'age', value: level3Age.toString() }],
          entityId: 'level3',
          entityName: 'ComplexEntity',
          order: 1,
          parentEntityId: 'level2'
        }
      ]);
    });

    it('should have empty changes on complex structure', () => {
      const newEntityLevel3 = new ComplexEntity('level3', aRandomString(), aRandomInteger(), []);
      const newEntityLevel3Another = new ComplexEntity('level3Another', aRandomString(), aRandomInteger(), []);
      const newEntityLevel2 = new ComplexEntity('level2', aRandomString(), aRandomInteger(), [newEntityLevel3, newEntityLevel3Another]);
      const newEntityLevel1 = new ComplexEntity('level1', aRandomString(), aRandomInteger(), [newEntityLevel2]);

      expect(newEntityLevel1.getChangedProps()).toEqual([]);
    });

    it('should raise events on sub entities', () => {
      const newEntityLevel3 = new ComplexEntity('level3', aRandomString(), aRandomInteger(), []);
      const newEntityLevel3Another = new ComplexEntity('level3Another', aRandomString(), aRandomInteger(), []);
      const newEntityLevel2 = new ComplexEntity('level2', aRandomString(), aRandomInteger(), [newEntityLevel3, newEntityLevel3Another]);
      const newEntityLevel1 = new ComplexEntity('level1', aRandomString(), aRandomInteger(), [newEntityLevel2]);
      const changed = vi.fn();

      newEntityLevel1.propertyChanged.register(changed);

      newEntityLevel2.collection.moveItem('level3Another', 0);

      expect(changed).toBeCalledWith({ _this: newEntityLevel1, propName: 'level1-collection' });
    });

    it('should raise events on sub entities 2', () => {
      const newEntityLevel3 = new ComplexEntity('level3', aRandomString(), aRandomInteger(), []);
      const newEntityLevel3Another = new ComplexEntity('level3Another', aRandomString(), aRandomInteger(), []);
      const newEntityLevel2 = new ComplexEntity('level2', aRandomString(), aRandomInteger(), [newEntityLevel3, newEntityLevel3Another]);
      const newEntityLevel1 = new ComplexEntity('level1', aRandomString(), aRandomInteger(), [newEntityLevel2]);
      const changed = vi.fn();

      newEntityLevel1.propertyChanged.register(changed);

      newEntityLevel3Another.age.set(aRandomInteger());

      expect(changed).toBeCalledWith({ _this: newEntityLevel1, propName: 'level1-collection' });
    });
  });
});